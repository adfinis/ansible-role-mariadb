---
- name: Create mariadb main configuration
  ansible.builtin.template:
    src: etc/my.cnf.j2
    dest: "{{ mariadb_conf }}"
    owner: root
    group: root
    mode: "0644"
    seuser: system_u
    serole: object_r
    setype: mysqld_etc_t
    selevel: s0
  notify:
    - Mariadb check config and restart

- name: Create mariadb component configurations
  ansible.builtin.template:
    src: etc/conf.d/{{ item }}.cnf.j2
    dest: "{{ mariadb_conf_dir }}/{{ item }}.cnf"
    owner: root
    group: root
    mode: "0644"
    seuser: system_u
    serole: object_r
    setype: mysqld_etc_t
    selevel: s0
  with_items: "{{ mariadb_conf_files }}"
  notify:
    - Mariadb check config and restart

- name: Enable mariadb service
  ansible.builtin.service:
    name: "{{ mariadb_service }}"
    state: started
    enabled: true

- name: Check if root my.cnf exists
  ansible.builtin.stat:
    path: "{{ mariadb_root_mycnf }}"
  register: mariadb_register_root_mycnf

- name: Generate root password
  ansible.builtin.command: pwgen -s 24 -N 1 # noqa: no-changed-when
  register: mariadb_register_root_password
  when: not mariadb_register_root_mycnf.stat.exists

- name: Create root password
  community.mysql.mysql_user:
    name: root
    host_all: true
    password: "{{ mariadb_register_root_password.stdout }}"
    update_password: always
    check_implicit_admin: true
    login_unix_socket: "{{ mariadb_socket }}"
    state: present
  when: mariadb_register_root_password.stdout is defined and mariadb_register_root_password.stdout

- name: Create root my.cnf
  ansible.builtin.template:
    src: root/my.cnf.j2
    dest: "{{ mariadb_root_mycnf }}"
    owner: root
    group: root
    mode: "0600"
    seuser: system_u
    serole: object_r
    setype: admin_home_t
    selevel: s0
  when: mariadb_register_root_password.stdout is defined and mariadb_register_root_password.stdout

- name: Flush handlers
  ansible.builtin.meta: flush_handlers
- name: Create databases
  community.mysql.mysql_db:
    name: "{{ item.name }}"
    encoding: '{{ item.encoding | default("utf8") }}'
    login_unix_socket: "{{ mariadb_socket }}"
    state: present
  when: item.name is defined and item.name
  with_items: "{{ mariadb_databases }}"

- name: Create users
  community.mysql.mysql_user:
    name: "{{ item.name }}"
    host: '{{ item.host | default("localhost") }}'
    password: "{{ item.password }}"
    update_password: always
    priv: "{{ item.priv }}"
    login_unix_socket: "{{ mariadb_socket }}"
    state: present
  no_log: true
  when: item.name is defined and item.name and item.password is defined and item.password and item.priv is defined and item.priv
  with_items: "{{ mariadb_users }}"
